import numpy as np

def ReduccionGaussJordan(A):
    filas, cols = A.shape    
    for i in range(filas):
        for j in range(filas):
            if i != j and A[j, i] != 0:
                factor = -A[i, i] / A[j, i]
                A[j, :] += factor * A[i, :]
        
    for i in range(filas):
        A[i, :] /= A[i, i]
    
    return A

def determinante(A):
    filas = A.shape[0]
    if filas == 1:
        return A[0, 0]
    elif filas == 2:
        return A[0, 0] * A[1, 1] - A[0, 1] * A[1, 0]
    
    det = 0
    for i in range(filas):
        subMatriz = np.delete(np.delete(A, 0, axis=0), i, axis=1)
        det += ((-1) ** i) * A[0, i] * determinante(subMatriz)
    
    return det

filas = 3
matriz = np.array([[3., 5., 0., 12.], [3., 6., 2., 6.], [3., 2., 1., 0.]])
I = np.hstack((matriz, np.eye(filas)))

I_r = ReduccionGaussJordan(I)
matrizInv = I_r[:, filas:]

Det = determinante(matriz)

print("Matriz inicial:")
print(matriz)
print("\nDeterminante:")
print(Det)
print("\nMatriz Reducida Gauss-Jordan:")
print(ReduccionGaussJordan(matriz))
print("\nSoluciones:")
print(f"x = {matriz[0, 3]}, y = {matriz[1, 3]}, z = {matriz[2, 3]}")
print("\nMatriz Inversa:")
print(matrizInv)